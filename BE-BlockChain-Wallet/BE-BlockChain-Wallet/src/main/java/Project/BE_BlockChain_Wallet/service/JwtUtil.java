package Project.BE_BlockChain_Wallet.service;

import Project.BE_BlockChain_Wallet.model.User;
import Project.BE_BlockChain_Wallet.repository.UserRepository;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.util.Date;
import java.util.Optional;
import java.util.Set;

@Component
public class JwtUtil {

    private final String secretKeyString = "Kuf8P7K8+XBrQ3XMOl2x6xVoMYK8SZBWo9h/xym/jiubAgnpqMbXVuKS230JyFwu";
    private final SecretKey secretKey = Keys.hmacShaKeyFor(secretKeyString.getBytes());

    private static final long EXPIRATION_TIME = 86400000L; // 24 gi·ªù

    // üîπ T·∫°o JWT Token
    public String generateJwtToken(UserDetails userDetails) {
        User user = (User) userDetails; // √âp ki·ªÉu sang User ƒë·ªÉ l·∫•y roles
        Set<String> roles = user.getRoles(); // L·∫•y danh s√°ch vai tr√≤ c·ªßa ng∆∞·ªùi d√πng

        return Jwts.builder()
                .setSubject(user.getEmail()) // S·ª≠ d·ª•ng email l√†m subject
                .setIssuedAt(new Date()) // Th·ªùi ƒëi·ªÉm ph√°t h√†nh token
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME)) // H·∫°n s·ª≠ d·ª•ng c·ªßa token
                .claim("roles", roles)  // Th√™m claim ch·ª©a danh s√°ch roles
                .signWith(secretKey, SignatureAlgorithm.HS512) // K√Ω token b·∫±ng secret key
                .compact();
    }

    // üîπ L·∫•y email t·ª´ JWT Token
    public String extractUsername(String token) {
        return extractClaims(token).getSubject();  // Tr·∫£ v·ªÅ email
    }

    // üîπ Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa token
    public boolean validateToken(String token, UserDetails userDetails) {
        String email = extractUsername(token);
        return email.equals(userDetails.getUsername()) && !isTokenExpired(token);
    }

    // üîπ Ki·ªÉm tra token c√≥ h·∫øt h·∫°n ch∆∞a
    private boolean isTokenExpired(String token) {
        return extractClaims(token).getExpiration().before(new Date());
    }

    // üîπ L·∫•y to√†n b·ªô claims t·ª´ token
    private Claims extractClaims(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(secretKey)
                .build()
                .parseClaimsJws(token)
                .getBody();
    }

    // üîπ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ token (d√†nh cho API /user-info)
    public User extractUserInfo(String token, UserRepository userRepository) throws Exception {
        String email = extractUsername(token); // L·∫•y email t·ª´ token
        Optional<User> user = userRepository.findByEmail(email); // L·∫•y user t·ª´ email
        if (user.isPresent()) {
            return user.get();
        } else {
            throw new Exception("User not found");
        }
    }
}
